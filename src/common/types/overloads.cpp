#include "common/types/overloads.h"

namespace soul::types
{
	using namespace ast;

	static const std::array k_operator_overloads = {
		// Arithmetic
		// ASTNode::Operator::Add
		OperatorOverload{ .op          = ASTNode::Operator::Add,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Add,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },
		OperatorOverload{ .op          = ASTNode::Operator::Add,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op          = ASTNode::Operator::Add,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Float64 },

		// ASTNode::Operator::Sub
		OperatorOverload{ .op          = ASTNode::Operator::Sub,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Sub,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },
		OperatorOverload{ .op          = ASTNode::Operator::Sub,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op          = ASTNode::Operator::Sub,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Float64 },

		// ASTNode::Operator::Mul
		OperatorOverload{ .op          = ASTNode::Operator::Mul,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Mul,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },
		OperatorOverload{ .op          = ASTNode::Operator::Mul,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op          = ASTNode::Operator::Mul,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Float64 },

		// ASTNode::Operator::Div
		OperatorOverload{ .op          = ASTNode::Operator::Div,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Div,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },
		OperatorOverload{ .op          = ASTNode::Operator::Div,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op          = ASTNode::Operator::Div,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Float64 },

		// ASTNode::Operator::Mod
		OperatorOverload{ .op          = ASTNode::Operator::Mod,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Mod,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },

		// ASTNode::Operator::Increment
		OperatorOverload{ .op          = ASTNode::Operator::Increment,
                         .input_types = { PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Increment,
                         .input_types = { PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },

		// ASTNode::Operator::Decrement
		OperatorOverload{ .op          = ASTNode::Operator::Decrement,
                         .input_types = { PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Int32   },
		OperatorOverload{ .op          = ASTNode::Operator::Decrement,
                         .input_types = { PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Int64   },

		// ASTNode::Operator::Assign
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::Boolean },
                          .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::Char, },
                          .return_type =  PrimitiveType::Kind::Char },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
		                  .input_types = {PrimitiveType::Kind::Float32, },
		                  .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::Float64, },
                          .return_type = PrimitiveType::Kind::Float64 },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },
		OperatorOverload{ .op = ASTNode::Operator::Assign,
                          .input_types = {PrimitiveType::Kind::String, },
                          .return_type = PrimitiveType::Kind::String },

		// ASTNode::Operator::AddAssign
		OperatorOverload{ .op = ASTNode::Operator::AddAssign,
                          .input_types = {PrimitiveType::Kind::Float32, },
                          .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op = ASTNode::Operator::AddAssign,
                          .input_types = {PrimitiveType::Kind::Float64, },
                          .return_type = PrimitiveType::Kind::Float64 },
		OperatorOverload{ .op = ASTNode::Operator::AddAssign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::AddAssign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },

		// ASTNode::Operator::SubAssign
		OperatorOverload{ .op = ASTNode::Operator::SubAssign,
                          .input_types = {PrimitiveType::Kind::Float32, },
                          .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op = ASTNode::Operator::SubAssign,
                          .input_types = {PrimitiveType::Kind::Float64, },
                          .return_type = PrimitiveType::Kind::Float64 },
		OperatorOverload{ .op = ASTNode::Operator::SubAssign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::SubAssign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },

		// ASTNode::Operator::MulAssign
		OperatorOverload{ .op = ASTNode::Operator::MulAssign,
                          .input_types = {PrimitiveType::Kind::Float32, },
                          .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op = ASTNode::Operator::MulAssign,
                          .input_types = {PrimitiveType::Kind::Float64, },
                          .return_type = PrimitiveType::Kind::Float64 },
		OperatorOverload{ .op = ASTNode::Operator::MulAssign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::MulAssign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },

		// ASTNode::Operator::DivAssign
		OperatorOverload{ .op = ASTNode::Operator::DivAssign,
                          .input_types = {PrimitiveType::Kind::Float32, },
                          .return_type = PrimitiveType::Kind::Float32 },
		OperatorOverload{ .op = ASTNode::Operator::DivAssign,
                          .input_types = {PrimitiveType::Kind::Float64, },
                          .return_type = PrimitiveType::Kind::Float64 },
		OperatorOverload{ .op = ASTNode::Operator::DivAssign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::DivAssign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },

		// ASTNode::Operator::ModAssign
		OperatorOverload{ .op = ASTNode::Operator::ModAssign,
                          .input_types = {PrimitiveType::Kind::Int32, },
                          .return_type = PrimitiveType::Kind::Int32 },
		OperatorOverload{ .op = ASTNode::Operator::ModAssign,
                          .input_types = {PrimitiveType::Kind::Int64, },
                          .return_type = PrimitiveType::Kind::Int64 },

		// ASTNode::Operator::Equal
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Equal,
                         .input_types = { PrimitiveType::Kind::String, PrimitiveType::Kind::String },
                         .return_type = PrimitiveType::Kind::Boolean },

		// ASTNode::Operator::NotEqual
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::NotEqual,
                         .input_types = { PrimitiveType::Kind::String, PrimitiveType::Kind::String },
                         .return_type = PrimitiveType::Kind::Boolean },

		// ASTNode::Operator::Greater
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Greater,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },

		// ASTNode::Operator::GreaterEqual
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::GreaterEqual,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },

		// ASTNode::Operator::Less
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::Less,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },

		// ASTNode::Operator::LessEqual
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Char, PrimitiveType::Kind::Char },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Float32, PrimitiveType::Kind::Float32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Float64, PrimitiveType::Kind::Float64 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Int32, PrimitiveType::Kind::Int32 },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LessEqual,
                         .input_types = { PrimitiveType::Kind::Int64, PrimitiveType::Kind::Int64 },
                         .return_type = PrimitiveType::Kind::Boolean },

		// Logical
		OperatorOverload{ .op          = ASTNode::Operator::LogicalNot,
                         .input_types = { PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LogicalAnd,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
		OperatorOverload{ .op          = ASTNode::Operator::LogicalOr,
                         .input_types = { PrimitiveType::Kind::Boolean, PrimitiveType::Kind::Boolean },
                         .return_type = PrimitiveType::Kind::Boolean },
	};

	std::span<const OperatorOverload> OperatorOverload::all() noexcept { return k_operator_overloads; }
}  // namespace soul::types
